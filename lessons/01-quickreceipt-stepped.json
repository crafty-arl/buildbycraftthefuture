{
  "id": "quickreceipt-stepped",
  "title": "üßæ QuickReceipt",
  "difficulty": "Beginner",
  "time": "20 minutes",
  "track": "Python",
  "overview": "Build a real tool you can actually use. Whether you're selling earrings at a pop-up, tutoring a friend, or just organizing your own expenses ‚Äî this tool helps you generate a clean, printable receipt with Python. You'll learn to store item info, calculate totals, and format it all into something that looks real. No frameworks. No setup. Just code that works ‚Äî and a receipt you can show off.",
  "xp": 100,
  "concepts": [
    "Building real-world tools",
    "Data storage and organization",
    "Financial calculations",
    "Professional formatting",
    "Error handling and validation"
  ],
  "steps": [
    {
      "id": "step-1",
      "title": "Calculate Totals",
      "goal": "Build the core calculation engine for your receipt tool",
      "instructions": [
        "Use a `for` loop to iterate through each item",
        "Add each item's price to a running subtotal",
        "Calculate 8.5% tax on the subtotal",
        "Calculate the final total (subtotal + tax)"
      ],
      "starterCode": "# üßæ QuickReceipt - Step 1: Calculate Totals\n\nprint(\"=== Step 1: Calculate Totals ===\")\nprint(\"Goal: Build the core calculation engine for your receipt tool\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # TODO: Replace the 0 values below with working code\n    \n    # Loop through each item and add its price to subtotal\n    subtotal = 0\n    # REPLACE THIS: for item in items:\n    #     subtotal += item[\"price\"]\n    \n    # For now, let's see what items we have:\n    for item in items:\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    # Calculate 8.5% tax on the subtotal\n    tax = 0  # REPLACE: round(subtotal * 0.085, 2)\n    \n    # Calculate the final total\n    total = 0  # REPLACE: round(subtotal + tax, 2)\n    \n    # Show your calculations (will be $0.00 until you fix the code above)\n    print(\"\\n--- Your Calculations ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    if subtotal == 0:\n        print(\"\\n‚ö†Ô∏è  Fix the subtotal calculation to see real results!\")\n        print(\"üí° Hint: Use a for loop to add up all item prices\")\n    \n    return \"Step 1 complete!\"\n\n# Test data (should total $9.75 + $0.83 tax = $10.58)\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nprint(\"Expected result: Subtotal $9.75 + Tax $0.83 = Total $10.58\")\nprint()\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "solutionCode": "# üßæ QuickReceipt - Step 1: Calculate Totals\n\nprint(\"=== Step 1: Calculate Totals ====\")\nprint(\"Goal: Build the core calculation engine for your receipt tool\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Loop through each item and add its price to subtotal\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    # Calculate 8.5% tax on the subtotal\n    tax = round(subtotal * 0.085, 2)\n    \n    # Calculate the final total\n    total = round(subtotal + tax, 2)\n    \n    # Show your calculations\n    print(\"\\n--- Final Calculations ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    print(\"\\n‚úÖ Perfect! Your calculations are correct!\")\n    \n    return \"Step 1 complete!\"\n\n# Test data (should total $9.75 + $0.83 tax = $10.58)\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nprint(\"Expected result: Subtotal $9.75 + Tax $0.83 = Total $10.58\")\nprint()\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "expectedOutput": "=== Step 1: Calculate Totals ====\nGoal: Build the core calculation engine for your receipt tool\n\nExpected result: Subtotal $9.75 + Tax $0.83 = Total $10.58\n\nProcessing 3 items...\n  - Coffee: $3.50\n  - Bagel: $2.25\n  - Orange Juice: $4.00\n\n--- Final Calculations ---\nSubtotal: $9.75\nTax (8.5%): $0.83\nTotal: $10.58\n\n‚úÖ Perfect! Your calculations are correct!\n\nStep 1 complete!"
    },
    {
      "id": "step-2", 
      "title": "Add Receipt Header",
      "goal": "Create a professional header that makes your receipt look real",
      "instructions": [
        "Create a header variable starting with a newline",
        "Add equal signs for a top border",
        "Add centered store name",
        "Include current date and time",
        "Add a separator line"
      ],
      "starterCode": "# üßæ QuickReceipt - Step 2: Add Receipt Header\n\nfrom datetime import datetime\n\nprint(\"=== Step 2: Add Receipt Header ===\")\nprint(\"Goal: Create a professional header that makes your receipt look real\")\nprint(\"Previous step completed: ‚úÖ Calculate totals\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED from previous step)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # TODO: NEW in Step 2 - Create a professional receipt header\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    # REPLACE the empty string below with header code:\n    header = \"\"  # Start with \"\\n\"\n    # header += \"=\" * 35 + \"\\n\"  # Add top border\n    # header += \"    QUICKRECEIPT STORE    \\n\"  # Add store name (centered)\n    # header += \"=\" * 35 + \"\\n\"  # Add separator\n    # header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"  # Add current date\n    # header += \"-\" * 35 + \"\\n\"  # Add bottom border\n    \n    if header == \"\":\n        print(\"‚ö†Ô∏è  Header is empty! Uncomment and fix the code above.\")\n        print(\"üí° Hint: Build the header step by step using string concatenation\")\n        print(\"\\nFor now, here's what the header should look like:\")\n        print(\"\\n\" + \"=\" * 35)\n        print(\"    QUICKRECEIPT STORE    \")\n        print(\"=\" * 35)\n        print(f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\")\n        print(\"-\" * 35)\n    else:\n        print(\"‚úÖ Header created successfully!\")\n        print(header)\n    \n    return \"Step 2 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "solutionCode": "# üßæ QuickReceipt - Step 2: Add Receipt Header\n\nfrom datetime import datetime\n\nprint(\"=== Step 2: Add Receipt Header ===\")\nprint(\"Goal: Create a professional header that makes your receipt look real\")\nprint(\"Previous step completed: ‚úÖ Calculate totals\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED from previous step)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # Step 2: Create a professional receipt header\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header created successfully!\")\n    print(header)\n    \n    print(\"\\n‚úÖ Excellent! Your receipt now has a professional header!\")\n    \n    return \"Step 2 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "expectedOutput": "=== Step 2: Add Receipt Header ===\nGoal: Create a professional header that makes your receipt look real\nPrevious step completed: ‚úÖ Calculate totals\n\nProcessing 3 items...\n  - Coffee: $3.50\n  - Bagel: $2.25\n  - Orange Juice: $4.00\n\n--- Calculations Complete ---\nSubtotal: $9.75\nTax (8.5%): $0.83\nTotal: $10.58\n\n--- Building Receipt Header ---\n‚úÖ Header created successfully!\n\n===================================\n    QUICKRECEIPT STORE    \n===================================\nDate: 2024-01-15 14:30\n-----------------------------------\n\n‚úÖ Excellent! Your receipt now has a professional header!\n\nStep 2 complete!"
    },
    {
      "id": "step-3",
      "title": "Format Item Lines",
      "goal": "Display items in a clean, professional format that looks like a real receipt",
      "instructions": [
        "Create a formatted item list section",
        "Use f-strings to format each item name and price",
        "Align prices to the right for professional appearance",
        "Add spacing between header and items"
      ],
      "starterCode": "# üßæ Receipt Generator - Step 3: Format Item Lines\n\nfrom datetime import datetime\n\nprint(\"=== Step 3: Format Item Lines ===\")\nprint(\"Goal: Create properly formatted item lines\")\nprint(\"Previous steps completed: ‚úÖ Calculate totals ‚úÖ Add header\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED from previous steps)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # Step 2: Create header (COMPLETED from previous step)\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header created successfully!\")\n    print(header)\n    \n    # TODO: NEW in Step 3 - Format item lines professionally\n    print(\"--- Building Item Lines ---\")\n    \n    # REPLACE the empty string below with item formatting code:\n    item_lines = \"\"  # Start building the item section\n    # item_lines += \"ITEMS:\\n\"  # Add section header\n    # for item in items:\n    #     # Format each item: name on left, price on right (30 chars total width)\n    #     item_line = f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    #     item_lines += item_line\n    # item_lines += \"-\" * 35 + \"\\n\"  # Add separator after items\n    \n    if item_lines == \"\":\n        print(\"‚ö†Ô∏è  Item lines are empty! Uncomment and fix the code above.\")\n        print(\"üí° Hint: Use f-string formatting with alignment (<25 for left, >6.2f for right)\")\n        print(\"\\nFor now, here's what the item lines should look like:\")\n        print(\"\\nITEMS:\")\n        for item in items:\n            print(f\"{item['name']:<25}${item['price']:>6.2f}\")\n        print(\"-\" * 35)\n    else:\n        print(\"‚úÖ Item lines created successfully!\")\n        print(item_lines)\n    \n    return \"Step 3 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "solutionCode": "# üßæ Receipt Generator - Step 3: Format Item Lines\n\nfrom datetime import datetime\n\nprint(\"=== Step 3: Format Item Lines ===\")\nprint(\"Goal: Create properly formatted item lines\")\nprint(\"Previous steps completed: ‚úÖ Calculate totals ‚úÖ Add header\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED from previous steps)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # Step 2: Create header (COMPLETED from previous step)\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header created successfully!\")\n    print(header)\n    \n    # Step 3: Format item lines professionally\n    print(\"--- Building Item Lines ---\")\n    \n    item_lines = \"\"  # Start building the item section\n    item_lines += \"ITEMS:\\n\"  # Add section header\n    for item in items:\n        # Format each item: name on left, price on right (30 chars total width)\n        item_line = f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n        item_lines += item_line\n    item_lines += \"-\" * 35 + \"\\n\"  # Add separator after items\n    \n    print(\"‚úÖ Item lines created successfully!\")\n    print(item_lines)\n    \n    print(\"\\n‚úÖ Great! Your receipt now has professional item formatting!\")\n    \n    return \"Step 3 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "expectedOutput": "=== Step 3: Format Item Lines ===\nGoal: Create properly formatted item lines\nPrevious steps completed: ‚úÖ Calculate totals ‚úÖ Add header\n\nProcessing 3 items...\n  - Coffee: $3.50\n  - Bagel: $2.25\n  - Orange Juice: $4.00\n\n--- Calculations Complete ---\nSubtotal: $9.75\nTax (8.5%): $0.83\nTotal: $10.58\n\n--- Building Receipt Header ---\n‚úÖ Header created successfully!\n\n===================================\n    QUICKRECEIPT STORE    \n===================================\nDate: 2024-01-15 14:30\n-----------------------------------\n\n--- Building Item Lines ---\n‚úÖ Item lines created successfully!\nITEMS:\nCoffee                   $ 3.50\nBagel                    $ 2.25\nOrange Juice             $ 4.00\n-----------------------------------\n\n‚úÖ Great! Your receipt now has professional item formatting!\n\nStep 3 complete!"
    },
    {
      "id": "step-4",
      "title": "Add Summary Section",
      "goal": "Create a clear financial summary that customers can easily understand",
      "instructions": [
        "Create a summary section after the item lines",
        "Display subtotal, tax, and total with proper alignment",
        "Use consistent formatting for currency values",
        "Add visual separation between sections"
      ],
      "starterCode": "# üßæ Receipt Generator - Step 4: Add Summary Section\n\nfrom datetime import datetime\n\nprint(\"=== Step 4: Add Summary Section ===\")\nprint(\"Goal: Create a financial summary section\")\nprint(\"Previous steps completed: ‚úÖ Calculate totals ‚úÖ Add header ‚úÖ Format items\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # Step 2: Create header (COMPLETED)\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header created successfully!\")\n    print(header)\n    \n    # Step 3: Format item lines (COMPLETED)\n    print(\"--- Building Item Lines ---\")\n    \n    item_lines = \"\"\n    item_lines += \"ITEMS:\\n\"\n    for item in items:\n        item_line = f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n        item_lines += item_line\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Item lines created successfully!\")\n    print(item_lines)\n    \n    # TODO: NEW in Step 4 - Add financial summary section\n    print(\"--- Building Summary Section ---\")\n    \n    # REPLACE the empty string below with summary formatting code:\n    summary_section = \"\"  # Start building the summary\n    # summary_section += \"SUMMARY:\\n\"  # Add section header\n    # summary_section += f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\"  # Right-aligned subtotal\n    # summary_section += f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\"  # Right-aligned tax\n    # summary_section += \"-\" * 35 + \"\\n\"  # Separator before total\n    # summary_section += f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\"  # Right-aligned total\n    # summary_section += \"=\" * 35 + \"\\n\"  # Final separator\n    \n    if summary_section == \"\":\n        print(\"‚ö†Ô∏è  Summary section is empty! Uncomment and fix the code above.\")\n        print(\"üí° Hint: Use string multiplication for spaces and :>6.2f for right alignment\")\n        print(\"\\nFor now, here's what the summary should look like:\")\n        print(\"\\nSUMMARY:\")\n        print(f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\")\n        print(f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\")\n        print(\"-\" * 35)\n        print(f\"TOTAL:{' ' * 21}${total:>6.2f}\")\n        print(\"=\" * 35)\n    else:\n        print(\"‚úÖ Summary section created successfully!\")\n        print(summary_section)\n    \n    return \"Step 4 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "solutionCode": "# üßæ Receipt Generator - Step 4: Add Summary Section\n\nfrom datetime import datetime\n\nprint(\"=== Step 4: Add Summary Section ===\")\nprint(\"Goal: Create a financial summary section\")\nprint(\"Previous steps completed: ‚úÖ Calculate totals ‚úÖ Add header ‚úÖ Format items\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- Calculations Complete ---\")\n    print(f\"Subtotal: ${subtotal:.2f}\")\n    print(f\"Tax (8.5%): ${tax:.2f}\")  \n    print(f\"Total: ${total:.2f}\")\n    \n    # Step 2: Create header (COMPLETED)\n    print(\"\\n--- Building Receipt Header ---\")\n    \n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header created successfully!\")\n    print(header)\n    \n    # Step 3: Format item lines (COMPLETED)\n    print(\"--- Building Item Lines ---\")\n    \n    item_lines = \"\"\n    item_lines += \"ITEMS:\\n\"\n    for item in items:\n        item_line = f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n        item_lines += item_line\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Item lines created successfully!\")\n    print(item_lines)\n    \n    # Step 4: Add financial summary section\n    print(\"--- Building Summary Section ---\")\n    \n    summary_section = \"\"  # Start building the summary\n    summary_section += \"SUMMARY:\\n\"  # Add section header\n    summary_section += f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\"  # Right-aligned subtotal\n    summary_section += f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\"  # Right-aligned tax\n    summary_section += \"-\" * 35 + \"\\n\"  # Separator before total\n    summary_section += f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\"  # Right-aligned total\n    summary_section += \"=\" * 35 + \"\\n\"  # Final separator\n    \n    print(\"‚úÖ Summary section created successfully!\")\n    print(summary_section)\n    \n    print(\"\\n‚úÖ Perfect! Your receipt now has a professional financial summary!\")\n    \n    return \"Step 4 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "expectedOutput": "=== Step 4: Add Summary Section ===\nGoal: Create a financial summary section\nPrevious steps completed: ‚úÖ Calculate totals ‚úÖ Add header ‚úÖ Format items\n\nProcessing 3 items...\n  - Coffee: $3.50\n  - Bagel: $2.25\n  - Orange Juice: $4.00\n\n--- Calculations Complete ---\nSubtotal: $9.75\nTax (8.5%): $0.83\nTotal: $10.58\n\n--- Building Receipt Header ---\n‚úÖ Header created successfully!\n\n===================================\n    QUICKRECEIPT STORE    \n===================================\nDate: 2024-01-15 14:30\n-----------------------------------\n\n--- Building Item Lines ---\n‚úÖ Item lines created successfully!\nITEMS:\nCoffee                   $ 3.50\nBagel                    $ 2.25\nOrange Juice             $ 4.00\n-----------------------------------\n\n--- Building Summary Section ---\n‚úÖ Summary section created successfully!\nSUMMARY:\nSubtotal:                $ 9.75\nTax (8.5%):              $ 0.83\n-----------------------------------\nTOTAL:                   $10.58\n===================================\n\n‚úÖ Perfect! Your receipt now has a professional financial summary!\n\nStep 4 complete!"
    },
    {
      "id": "step-5",
      "title": "Add Footer Message",
      "goal": "Add a friendly footer that makes customers want to return",
      "instructions": [
        "Create a footer section with thank you message",
        "Add store contact information",
        "Include a friendly closing message",
        "Use consistent formatting with the rest of the receipt"
      ],
      "starterCode": "# üßæ Receipt Generator - Step 5: Add Footer Message\n\nfrom datetime import datetime\n\nprint(\"=== Step 5: Add Footer Message ===\")\nprint(\"Goal: Add a customer-friendly footer\")\nprint(\"Previous steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Steps 1-4: All previous functionality (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- All Sections Built ---\")\n    print(f\"Subtotal: ${subtotal:.2f}, Tax: ${tax:.2f}, Total: ${total:.2f}\")\n    \n    # Previous sections (condensed for space)\n    header = \"\\n\" + \"=\" * 35 + \"\\n\" + \"    QUICKRECEIPT STORE    \\n\" + \"=\" * 35 + \"\\n\" + f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\" + \"-\" * 35 + \"\\n\"\n    \n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    summary_section = \"SUMMARY:\\n\" + f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\" + f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\" + \"-\" * 35 + \"\\n\" + f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\" + \"=\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header, items, and summary ready!\")\n    \n    # TODO: NEW in Step 5 - Add footer message\n    print(\"\\n--- Building Footer Message ---\")\n    \n    # REPLACE the empty string below with footer code:\n    footer_message = \"\"  # Start building the footer\n    # footer_message += \"\\n\"  # Add some space\n    # footer_message += \"Thank you for your business!\\n\"  # Thank you message\n    # footer_message += \"\\n\"  # Blank line\n    # footer_message += \"Visit us again soon! üòä\\n\"  # Friendly message\n    # footer_message += \"\\n\"  # Blank line\n    # footer_message += \"Questions? Call: (555) 123-CAFE\\n\"  # Contact info\n    # footer_message += \"Email: hello@pythoncorner.com\\n\"  # Email\n    # footer_message += \"\\n\"  # Final spacing\n    # footer_message += \"=\" * 35  # Bottom border (no newline)\n    \n    if footer_message == \"\":\n        print(\"‚ö†Ô∏è  Footer message is empty! Uncomment and fix the code above.\")\n        print(\"üí° Hint: Build the footer line by line with friendly messages\")\n        print(\"\\nFor now, here's what the footer should look like:\")\n        print(\"\\nThank you for your business!\\n\")\n        print(\"Visit us again soon! üòä\\n\")\n        print(\"Questions? Call: (555) 123-CAFE\")\n        print(\"Email: hello@pythoncorner.com\\n\")\n        print(\"=\" * 35)\n    else:\n        print(\"‚úÖ Footer message created successfully!\")\n        print(footer_message)\n    \n    return \"Step 5 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "solutionCode": "# üßæ Receipt Generator - Step 5: Add Footer Message\n\nfrom datetime import datetime\n\nprint(\"=== Step 5: Add Footer Message ===\")\nprint(\"Goal: Add a customer-friendly footer\")\nprint(\"Previous steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a receipt from a list of items\"\"\"\n    \n    print(f\"Processing {len(items)} items...\")\n    \n    # Steps 1-4: All previous functionality (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n        print(f\"  - {item['name']}: ${item['price']:.2f}\")\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    print(\"\\n--- All Sections Built ---\")\n    print(f\"Subtotal: ${subtotal:.2f}, Tax: ${tax:.2f}, Total: ${total:.2f}\")\n    \n    # Previous sections (condensed for space)\n    header = \"\\n\" + \"=\" * 35 + \"\\n\" + \"    QUICKRECEIPT STORE    \\n\" + \"=\" * 35 + \"\\n\" + f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\" + \"-\" * 35 + \"\\n\"\n    \n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    summary_section = \"SUMMARY:\\n\" + f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\" + f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\" + \"-\" * 35 + \"\\n\" + f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\" + \"=\" * 35 + \"\\n\"\n    \n    print(\"‚úÖ Header, items, and summary ready!\")\n    \n    # Step 5: Add footer message\n    print(\"\\n--- Building Footer Message ---\")\n    \n    footer_message = \"\"  # Start building the footer\n    footer_message += \"\\n\"  # Add some space\n    footer_message += \"Thank you for your business!\\n\"  # Thank you message\n    footer_message += \"\\n\"  # Blank line\n    footer_message += \"Visit us again soon! üòä\\n\"  # Friendly message\n    footer_message += \"\\n\"  # Blank line\n    footer_message += \"Questions? Call: (555) 123-CAFE\\n\"  # Contact info\n    footer_message += \"Email: hello@pythoncorner.com\\n\"  # Email\n    footer_message += \"\\n\"  # Final spacing\n    footer_message += \"=\" * 35  # Bottom border (no newline)\n    \n    print(\"‚úÖ Footer message created successfully!\")\n    print(footer_message)\n    \n    print(\"\\n‚úÖ Excellent! Your receipt now has a warm, professional footer!\")\n    \n    return \"Step 5 complete!\"\n\n# Test data\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\n\nresult = create_receipt(sample_items)\nprint(f\"\\n{result}\")",
      "expectedOutput": "=== Step 5: Add Footer Message ===\nGoal: Add a customer-friendly footer\nPrevious steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary\n\nProcessing 3 items...\n  - Coffee: $3.50\n  - Bagel: $2.25\n  - Orange Juice: $4.00\n\n--- All Sections Built ---\nSubtotal: $9.75, Tax: $0.83, Total: $10.58\n‚úÖ Header, items, and summary ready!\n\n--- Building Footer Message ---\n‚úÖ Footer message created successfully!\n\nThank you for your business!\n\nVisit us again soon! üòä\n\nQuestions? Call: (555) 123-CAFE\nEmail: hello@pythoncorner.com\n\n===================================\n\n‚úÖ Excellent! Your receipt now has a warm, professional footer!\n\nStep 5 complete!"
    },
    {
      "id": "step-6",
      "title": "Combine All Parts",
      "goal": "Assemble your complete receipt tool that you can actually use",
      "instructions": [
        "Combine header, items, summary, and footer into one receipt",
        "Return the complete receipt as a string",
        "Test the function with different item lists",
        "Ensure proper spacing and formatting throughout"
      ],
      "starterCode": "# üßæ Receipt Generator - Step 6: Combine All Parts\n\nfrom datetime import datetime\n\nprint(\"=== Step 6: Combine All Parts ===\")\nprint(\"Goal: Assemble a complete receipt\")\nprint(\"Previous steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary ‚úÖ Footer\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a complete receipt from a list of items\"\"\"\n    \n    print(f\"Building complete receipt for {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    # Step 2: Create header (COMPLETED)\n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    # Step 3: Format item lines (COMPLETED)\n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    # Step 4: Add summary section (COMPLETED)\n    summary_section = \"SUMMARY:\\n\"\n    summary_section += f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\"\n    summary_section += f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\"\n    summary_section += \"-\" * 35 + \"\\n\"\n    summary_section += f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\"\n    summary_section += \"=\" * 35 + \"\\n\"\n    \n    # Step 5: Add footer message (COMPLETED)\n    footer_message = \"\\n\"\n    footer_message += \"Thank you for your business!\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"Visit us again soon! üòä\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"Questions? Call: (555) 123-CAFE\\n\"\n    footer_message += \"Email: hello@pythoncorner.com\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"=\" * 35\n    \n    # TODO: NEW in Step 6 - Combine all parts into complete receipt\n    print(\"--- Assembling Complete Receipt ---\")\n    \n    # REPLACE the empty string below with combination code:\n    complete_receipt = \"\"  # Start building the complete receipt\n    # complete_receipt += header  # Add the header\n    # complete_receipt += item_lines  # Add the item lines\n    # complete_receipt += summary_section  # Add the summary\n    # complete_receipt += footer_message  # Add the footer\n    \n    if complete_receipt == \"\":\n        print(\"‚ö†Ô∏è  Complete receipt is empty! Uncomment the code above.\")\n        print(\"üí° Hint: Combine all sections using the += operator\")\n        print(\"\\nHere are the sections to combine:\")\n        print(\"1. header\")\n        print(\"2. item_lines\")\n        print(\"3. summary_section\")\n        print(\"4. footer_message\")\n        return \"Receipt assembly incomplete\"\n    else:\n        print(\"‚úÖ Complete receipt assembled successfully!\")\n        print(\"\\n--- FINAL RECEIPT ---\")\n        print(complete_receipt)\n        return complete_receipt\n\n# Test with different data\nprint(\"Testing with sample items:\")\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25}\n]\n\nreceipt = create_receipt(sample_items)\nprint(f\"\\nüéâ Step 6 complete! Receipt generated successfully!\")",
      "solutionCode": "# üßæ Receipt Generator - Step 6: Combine All Parts\n\nfrom datetime import datetime\n\nprint(\"=== Step 6: Combine All Parts ===\")\nprint(\"Goal: Assemble a complete receipt\")\nprint(\"Previous steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary ‚úÖ Footer\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a complete receipt from a list of items\"\"\"\n    \n    print(f\"Building complete receipt for {len(items)} items...\")\n    \n    # Step 1: Calculate totals (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    # Step 2: Create header (COMPLETED)\n    header = \"\\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += \"    QUICKRECEIPT STORE    \\n\"\n    header += \"=\" * 35 + \"\\n\"\n    header += f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\"\n    header += \"-\" * 35 + \"\\n\"\n    \n    # Step 3: Format item lines (COMPLETED)\n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    # Step 4: Add summary section (COMPLETED)\n    summary_section = \"SUMMARY:\\n\"\n    summary_section += f\"Subtotal:{' ' * 18}${subtotal:>6.2f}\\n\"\n    summary_section += f\"Tax (8.5%):{' ' * 15}${tax:>6.2f}\\n\"\n    summary_section += \"-\" * 35 + \"\\n\"\n    summary_section += f\"TOTAL:{' ' * 21}${total:>6.2f}\\n\"\n    summary_section += \"=\" * 35 + \"\\n\"\n    \n    # Step 5: Add footer message (COMPLETED)\n    footer_message = \"\\n\"\n    footer_message += \"Thank you for your business!\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"Visit us again soon! üòä\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"Questions? Call: (555) 123-CAFE\\n\"\n    footer_message += \"Email: hello@pythoncorner.com\\n\"\n    footer_message += \"\\n\"\n    footer_message += \"=\" * 35\n    \n    # Step 6: Combine all parts into complete receipt\n    print(\"--- Assembling Complete Receipt ---\")\n    \n    complete_receipt = \"\"  # Start building the complete receipt\n    complete_receipt += header  # Add the header\n    complete_receipt += item_lines  # Add the item lines\n    complete_receipt += summary_section  # Add the summary\n    complete_receipt += footer_message  # Add the footer\n    \n    print(\"‚úÖ Complete receipt assembled successfully!\")\n    print(\"\\n--- FINAL RECEIPT ---\")\n    print(complete_receipt)\n    return complete_receipt\n\n# Test with different data\nprint(\"Testing with sample items:\")\nsample_items = [\n    {\"name\": \"Coffee\", \"price\": 3.50},\n    {\"name\": \"Bagel\", \"price\": 2.25}\n]\n\nreceipt = create_receipt(sample_items)\nprint(f\"\\nüéâ Step 6 complete! Receipt generated successfully!\")",
      "expectedOutput": "=== Step 6: Combine All Parts ===\nGoal: Assemble a complete receipt\nPrevious steps completed: ‚úÖ Calculate ‚úÖ Header ‚úÖ Items ‚úÖ Summary ‚úÖ Footer\n\nTesting with sample items:\nBuilding complete receipt for 2 items...\n--- Assembling Complete Receipt ---\n‚úÖ Complete receipt assembled successfully!\n\n--- FINAL RECEIPT ---\n\n===================================\n    QUICKRECEIPT STORE    \n===================================\nDate: 2024-01-15 14:30\n-----------------------------------\nITEMS:\nCoffee                   $ 3.50\nBagel                    $ 2.25\n-----------------------------------\nSUMMARY:\nSubtotal:                $ 5.75\nTax (8.5%):              $ 0.49\n-----------------------------------\nTOTAL:                   $ 6.24\n===================================\n\nThank you for your business!\n\nVisit us again soon! üòä\n\nQuestions? Call: (555) 123-CAFE\nEmail: hello@pythoncorner.com\n\n===================================\n\nüéâ Step 6 complete! Receipt generated successfully!"
    },
    {
      "id": "step-7",
      "title": "Final Polish & Testing",
      "goal": "Make your receipt tool production-ready with error handling",
      "instructions": [
        "Add error handling for edge cases",
        "Test with different numbers of items",
        "Add input validation and helpful error messages",
        "Create a final, production-ready function"
      ],
      "starterCode": "# üßæ Receipt Generator - Step 7: Final Polish & Testing\n\nfrom datetime import datetime\n\nprint(\"=== Step 7: Final Polish & Testing ===\")\nprint(\"Goal: Create a production-ready receipt generator\")\nprint(\"Previous steps completed: ‚úÖ All core functionality\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a complete, professional receipt from a list of items\"\"\"\n    \n    # TODO: Add input validation\n    # Check if items list is empty or invalid\n    if not items:  # This checks for empty list\n        return \"Error: No items provided. Please add items to generate a receipt.\"\n    \n    # TODO: Add validation for each item\n    for i, item in enumerate(items):\n        # UNCOMMENT AND FIX THE VALIDATION BELOW:\n        # if not isinstance(item, dict):\n        #     return f\"Error: Item {i+1} is not valid. Expected format: {{'name': 'Item Name', 'price': 0.00}}\"\n        # if 'name' not in item or 'price' not in item:\n        #     return f\"Error: Item {i+1} missing required fields 'name' or 'price'\"\n        # if not isinstance(item['price'], (int, float)) or item['price'] < 0:\n        #     return f\"Error: Item {i+1} has invalid price. Price must be a positive number.\"\n        pass  # Remove this when you uncomment the validation above\n    \n    print(f\"‚úÖ Input validation passed for {len(items)} items\")\n    \n    # All previous functionality (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    # Build all sections\n    header = \"\\n\" + \"=\" * 35 + \"\\n\" + \"    QUICKRECEIPT STORE    \\n\" + \"=\" * 35 + \"\\n\" + f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\" + \"-\" * 35 + \"\\n\"\n    \n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    summary_section = f\"SUMMARY:\\nSubtotal:{' ' * 18}${subtotal:>6.2f}\\nTax (8.5%):{' ' * 15}${tax:>6.2f}\\n\" + \"-\" * 35 + f\"\\nTOTAL:{' ' * 21}${total:>6.2f}\\n\" + \"=\" * 35 + \"\\n\"\n    \n    footer_message = \"\\nThank you for your business!\\n\\nVisit us again soon! üòä\\n\\nQuestions? Call: (555) 123-CAFE\\nEmail: hello@pythoncorner.com\\n\\n\" + \"=\" * 35\n    \n    # Combine all parts\n    complete_receipt = header + item_lines + summary_section + footer_message\n    \n    print(\"‚úÖ Receipt generated successfully!\")\n    return complete_receipt\n\n# TODO: Test various scenarios\nprint(\"üß™ Testing different scenarios...\\n\")\n\n# Test 1: Normal case\nprint(\"Test 1: Normal order\")\nnormal_items = [\n    {\"name\": \"Espresso\", \"price\": 2.50},\n    {\"name\": \"Croissant\", \"price\": 3.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\nreceipt1 = create_receipt(normal_items)\nprint(\"‚úÖ Normal case passed\\n\")\n\n# Test 2: Single item\nprint(\"Test 2: Single item\")\nsingle_item = [{\"name\": \"Large Coffee\", \"price\": 5.00}]\nreceipt2 = create_receipt(single_item)\nprint(\"‚úÖ Single item passed\\n\")\n\n# Test 3: Empty list (should show error)\nprint(\"Test 3: Empty list\")\nresult = create_receipt([])\nprint(f\"Result: {result}\")\nprint(\"‚úÖ Empty list handled correctly\\n\")\n\nprint(\"üéâ All tests passed! Your receipt generator is production-ready!\")\nprint(\"\\nüìä Final Statistics:\")\nprint(f\"‚Ä¢ 7 steps completed\")\nprint(f\"‚Ä¢ Input validation added\")\nprint(f\"‚Ä¢ Error handling implemented\")\nprint(f\"‚Ä¢ Multiple test cases passed\")\nprint(f\"‚Ä¢ Professional formatting achieved\")\n\nprint(\"\\nüèÜ Congratulations! You've built a complete receipt generator!\")",
      "solutionCode": "# üßæ Receipt Generator - Step 7: Final Polish & Testing\n\nfrom datetime import datetime\n\nprint(\"=== Step 7: Final Polish & Testing ===\")\nprint(\"Goal: Create a production-ready receipt generator\")\nprint(\"Previous steps completed: ‚úÖ All core functionality\")\nprint()\n\ndef create_receipt(items):\n    \"\"\"Generate a complete, professional receipt from a list of items\"\"\"\n    \n    # Add input validation\n    # Check if items list is empty or invalid\n    if not items:  # This checks for empty list\n        return \"Error: No items provided. Please add items to generate a receipt.\"\n    \n    # Add validation for each item\n    for i, item in enumerate(items):\n        if not isinstance(item, dict):\n            return f\"Error: Item {i+1} is not valid. Expected format: {{'name': 'Item Name', 'price': 0.00}}\"\n        if 'name' not in item or 'price' not in item:\n            return f\"Error: Item {i+1} missing required fields 'name' or 'price'\"\n        if not isinstance(item['price'], (int, float)) or item['price'] < 0:\n            return f\"Error: Item {i+1} has invalid price. Price must be a positive number.\"\n    \n    print(f\"‚úÖ Input validation passed for {len(items)} items\")\n    \n    # All previous functionality (COMPLETED)\n    subtotal = 0\n    for item in items:\n        subtotal += item[\"price\"]\n    \n    tax = round(subtotal * 0.085, 2)\n    total = round(subtotal + tax, 2)\n    \n    # Build all sections\n    header = \"\\n\" + \"=\" * 35 + \"\\n\" + \"    QUICKRECEIPT STORE    \\n\" + \"=\" * 35 + \"\\n\" + f\"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\" + \"-\" * 35 + \"\\n\"\n    \n    item_lines = \"ITEMS:\\n\"\n    for item in items:\n        item_lines += f\"{item['name']:<25}${item['price']:>6.2f}\\n\"\n    item_lines += \"-\" * 35 + \"\\n\"\n    \n    summary_section = f\"SUMMARY:\\nSubtotal:{' ' * 18}${subtotal:>6.2f}\\nTax (8.5%):{' ' * 15}${tax:>6.2f}\\n\" + \"-\" * 35 + f\"\\nTOTAL:{' ' * 21}${total:>6.2f}\\n\" + \"=\" * 35 + \"\\n\"\n    \n    footer_message = \"\\nThank you for your business!\\n\\nVisit us again soon! üòä\\n\\nQuestions? Call: (555) 123-CAFE\\nEmail: hello@pythoncorner.com\\n\\n\" + \"=\" * 35\n    \n    # Combine all parts\n    complete_receipt = header + item_lines + summary_section + footer_message\n    \n    print(\"‚úÖ Receipt generated successfully!\")\n    return complete_receipt\n\n# Test various scenarios\nprint(\"üß™ Testing different scenarios...\\n\")\n\n# Test 1: Normal case\nprint(\"Test 1: Normal order\")\nnormal_items = [\n    {\"name\": \"Espresso\", \"price\": 2.50},\n    {\"name\": \"Croissant\", \"price\": 3.25},\n    {\"name\": \"Orange Juice\", \"price\": 4.00}\n]\nreceipt1 = create_receipt(normal_items)\nprint(\"‚úÖ Normal case passed\\n\")\n\n# Test 2: Single item\nprint(\"Test 2: Single item\")\nsingle_item = [{\"name\": \"Large Coffee\", \"price\": 5.00}]\nreceipt2 = create_receipt(single_item)\nprint(\"‚úÖ Single item passed\\n\")\n\n# Test 3: Empty list (should show error)\nprint(\"Test 3: Empty list\")\nresult = create_receipt([])\nprint(f\"Result: {result}\")\nprint(\"‚úÖ Empty list handled correctly\\n\")\n\nprint(\"üéâ All tests passed! Your receipt generator is production-ready!\")\nprint(\"\\nüìä Final Statistics:\")\nprint(f\"‚Ä¢ 7 steps completed\")\nprint(f\"‚Ä¢ Input validation added\")\nprint(f\"‚Ä¢ Error handling implemented\")\nprint(f\"‚Ä¢ Multiple test cases passed\")\nprint(f\"‚Ä¢ Professional formatting achieved\")\n\nprint(\"\\nüèÜ Congratulations! You've built a complete receipt generator!\")",
      "expectedOutput": "=== Step 7: Final Polish & Testing ===\nGoal: Create a production-ready receipt generator\nPrevious steps completed: ‚úÖ All core functionality\n\nüß™ Testing different scenarios...\n\nTest 1: Normal order\n‚úÖ Input validation passed for 3 items\n‚úÖ Receipt generated successfully!\n‚úÖ Normal case passed\n\nTest 2: Single item\n‚úÖ Input validation passed for 1 items\n‚úÖ Receipt generated successfully!\n‚úÖ Single item passed\n\nTest 3: Empty list\nResult: Error: No items provided. Please add items to generate a receipt.\n‚úÖ Empty list handled correctly\n\nüéâ All tests passed! Your receipt generator is production-ready!\n\nüìä Final Statistics:\n‚Ä¢ 7 steps completed\n‚Ä¢ Input validation added\n‚Ä¢ Error handling implemented\n‚Ä¢ Multiple test cases passed\n‚Ä¢ Professional formatting achieved\n\nüèÜ Congratulations! You've built a complete receipt generator!"
    }
  ]
} 