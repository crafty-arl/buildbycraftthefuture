generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Using SQLite for development, change to "postgresql" for production
  url      = env("DATABASE_URL")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  
  // /build specific fields
  totalXP       Int       @default(0)
  level         Int       @default(1)
  joinDate      DateTime  @default(now())
  isPassHolder  Boolean   @default(false)
  
  accounts      Account[]
  sessions      Session[]
  toolProgress  UserToolProgress[]
  achievements  UserAchievement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// /build specific models
model Tool {
  id          String @id @default(cuid())
  slug        String @unique
  title       String
  track       String
  season      String
  order       Int
  description String
  difficulty  String
  
  userProgress UserToolProgress[]
}

model UserToolProgress {
  id          String   @id @default(cuid())
  userId      String
  toolId      String
  status      String   @default("not_started") // not_started, in_progress, completed
  xpEarned    Int      @default(0)
  completedAt DateTime?
  code        String?
  toolStates  Json?    // Store additional tool state data as JSON
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)
  
  @@unique([userId, toolId])
}

model UserAchievement {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String
  icon         String
  earnedAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 